{"version":3,"sources":["../src/api.js"],"names":["api","router","routeKeys","Object","keys","routes","entries","forEach","key","value","url","method","indexOf","replace","endpoint","res","body","params","json","get","req","version","use","status","send","requestUrl","originalUrl"],"mappings":";;;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;;;;AAaA,IAAMA,MAAM,SAANA,GAAM,SAAU;AACpB,MAAMC,SAAS,sBAAf;;AAEA,MAAMC,YAAYC,OAAOC,IAAP,CAAYC,MAAZ,CAAlB;AACAF,SAAOG,OAAP,CAAeD,MAAf,EAAuBE,OAAvB,CAA+B,gBAAkB;AAAA;AAAA,QAAhBC,GAAgB;AAAA,QAAXC,KAAW;;AAC/C;;AAEA,QAAIC,MAAMF,GAAV;AACA,QAAIG,SAAS,MAAb;;AAEA;;;;;;AAMA,QAAID,IAAIE,OAAJ,CAAY,KAAZ,MAAuB,CAA3B,EAA8B;AAC5BF,YAAMA,IAAIG,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,CAAN;AACAF,eAAS,KAAT;AACD;;AAED,QAAMG,WAAWL,KAAjB;AACAR,WAAOU,MAAP,EAAeD,GAAf,EAAoB,iBAAmBK,GAAnB,EAA2B;AAAA,UAAxBC,IAAwB,SAAxBA,IAAwB;AAAA,UAAlBC,MAAkB,SAAlBA,MAAkB;;AAC7CF,UAAIG,IAAJ,CAASJ,SAASE,IAAT,EAAeC,MAAf,CAAT;AACD,KAFD;AAGD,GArBD;;AAuBA;AACAhB,SAAOkB,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAML,GAAN,EAAc;AAC5BA,QAAIG,IAAJ,CAAS,EAAEG,yBAAF,EAAWhB,QAAQH,SAAnB,EAAT;AACD,GAFD;;AAIAD,SAAOqB,GAAP,CAAW,UAACF,GAAD,EAAML,GAAN,EAAc;AACvBA,QAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,cAAQ,KADW;AAEnBZ,cAAQS,IAAIT,MAFO;AAGnBc,kBAAYL,IAAIM,WAHG;AAInBV,YAAMI,IAAIJ,IAJS;AAKnBX,cAAQH;AALW,KAArB;AAOD,GARD;;AAUA,SAAOD,MAAP;AACD,CA3CD;;kBA6CeD,G","file":"api.js","sourcesContent":["import { Router } from 'express'\nimport { version } from '../package.json'\n\n/**\n * Function to create POST api endpoints. The provided `routes` object uses its\n * keys as the route path, and value as a function to handle the route.\n * @param {object} routes - Object with functions as values\n * @return {Router} Express Router\n * @example\n * const demoApi = api({\n *   '/rest/1': () => 1,\n *   '/rest/2': () => 'abc';\n * })\n *\n * app.use('/', demoApi);\n */\nconst api = routes => {\n  const router = Router()\n\n  const routeKeys = Object.keys(routes)\n  Object.entries(routes).forEach(([key, value]) => {\n    // typecheck here\n\n    let url = key\n    let method = 'post'\n\n    /* Temp idea to support GET requests\n     * {\n     *  'GET/rest/getendpoint': () => 'You GET me!',\n     *  'rest/postendpoint: () => 'POSTed!'\n     * }\n     */\n    if (url.indexOf('GET') === 0) {\n      url = url.replace('GET', '')\n      method = 'get'\n    }\n\n    const endpoint = value\n    router[method](url, ({ body, params }, res) => {\n      res.json(endpoint(body, params))\n    })\n  })\n\n  // Print some data at api root\n  router.get('/', (req, res) => {\n    res.json({ version, routes: routeKeys })\n  })\n\n  router.use((req, res) => {\n    res.status(404).send({\n      status: '404',\n      method: req.method,\n      requestUrl: req.originalUrl,\n      body: req.body,\n      routes: routeKeys\n    })\n  })\n\n  return router\n}\n\nexport default api\n"]}
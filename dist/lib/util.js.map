{"version":3,"sources":["../../src/lib/util.js"],"names":["isProvider","provider","warnProvider","Error","randomRange","min","max","Math","floor","random","makeNumber","getRandom","arr","length"],"mappings":";;;;;AAAO,IAAMA,kCAAa,SAAbA,UAAa,WAAY;AACpC,MAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoC;AAClC,WAAO,IAAP;AACD;AACD,SAAO,KAAP;AACD,CALM;;AAOA,IAAMC,sCAAe,SAAfA,YAAe,WAAY;AACtC,MAAI,CAACF,WAAWC,QAAX,CAAL,EAA2B;AACzB,UAAM,IAAIE,KAAJ,6CAAoDF,QAApD,CAAN;AACD;AACD,SAAO,IAAP;AACD,CALM;;AAOP;;;;;;;AAOO,IAAMG,oCAAc,SAAdA,WAAc,CAACC,GAAD,EAAMC,GAAN;AAAA,SACzBC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,MAAiBH,MAAMD,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GADrB;AAAA,CAApB;;AAGP;;;;;;;;;;;;AAYO,IAAMK,kCAAa,SAAbA,UAAa,CAACL,GAAD,EAAMC,GAAN;AAAA,SAAe,CAACA,GAAD,GAAOD,GAAP,GAAaD,YAAYC,GAAZ,EAAiBC,GAAjB,CAA5B;AAAA,CAAnB;;AAEP;;;;;AAKO,IAAMK,gCAAY,SAAZA,SAAY;AAAA,SAAOC,IAAIL,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgBG,IAAIC,MAA/B,CAAJ,CAAP;AAAA,CAAlB","file":"util.js","sourcesContent":["export const isProvider = provider => {\n  if (typeof provider === 'function') {\n    return true\n  }\n  return false\n}\n\nexport const warnProvider = provider => {\n  if (!isProvider(provider)) {\n    throw new Error(`Provider must be a function. Recieved: ${provider}`)\n  }\n  return true\n}\n\n/**\n * Create a whole number between the `min` and `max` values\n * @param {number} min - Lowest number\n * @param {number} max - Highest number\n * @return {number}\n * @todo Can't recall if this would include the min & max\n */\nexport const randomRange = (min, max) =>\n  Math.floor(Math.random() * (max - min + 1)) + min\n\n/**\n * Create a whole number between the `min` and `max` values. Very similar to randomRange(),\n * though this will return `min` if it is the only argument. This is mostly used to extract\n * the if/else logic from providers.\n *\n * Most providers have a signature of `fn(min :number, [max] :number)`. where given\n * one value they always return that number. But providing 2 values, `min` & `max`,\n * will generate random a value between that range.\n * @param {number} min - Lowest number\n * @param {number} max - Highest number\n * @return {number}\n */\nexport const makeNumber = (min, max) => (!max ? min : randomRange(min, max))\n\n/**\n * Pick a random item from an array.\n * @param {array} arr - Array to pick a value from\n * @return {any} Single value from array\n */\nexport const getRandom = arr => arr[Math.floor(Math.random() * arr.length)]\n"]}
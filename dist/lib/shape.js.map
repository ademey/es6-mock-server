{"version":3,"sources":["../../src/lib/shape.js"],"names":["shape","Object","entries","def","reduce","acc","key","fn","i"],"mappings":";;;;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;;;AAgBO,IAAMA,wBAAQ,SAARA,KAAQ;AAAA,SAAO;AAAA;AAC1B;AACAC,aAAOC,OAAP,CAAeC,GAAf,EAAoBC,MAApB,CAA2B,UAACC,GAAD,QAAoB;AAAA;AAAA,YAAbC,GAAa;AAAA,YAARC,EAAQ;;AAC7C;AACA,YAAI,sBAAWA,EAAX,CAAJ,EAAoB;AAClBF,cAAIC,GAAJ,IAAWC,GAAGC,CAAH,CAAX;AACD,SAFD,MAEO;AACL;AACAH,cAAIC,GAAJ,IAAWC,EAAX;AACD;AACD,eAAOF,GAAP;AACD,OATD,EASG,EATH;AAF0B;AAAA,GAAP;AAAA,CAAd","file":"shape.js","sourcesContent":["import { isProvider } from './util'\n\n/**\n * Create a function that will return an object. The values of that object are also called if\n * they are a function.\n * @type {ProviderCreator}\n * @param {object} def - Shape definition to repeat\n * @return {function(): object}\n * @example\n * const theSame = shape({ a: '1', b: '2' });\n * theSame() // { a: '1', b: '2' }\n * theSame() // { a: '1', b: '2' }\n *\n * // Use functions to create random data\n * const diff = shape({ a: () => Math.random(), b: '2' })\n * diff() // { a: 0.2, b: '2' }\n * diff() // { a: 0.04, b: '2' }\n */\nexport const shape = def => i =>\n  // Create a new object with the same keys but new values\n  Object.entries(def).reduce((acc, [key, fn]) => {\n    // Is the value a function? If so call and assign value\n    if (isProvider(fn)) {\n      acc[key] = fn(i)\n    } else {\n      // Return the original value if not a provider fn\n      acc[key] = fn\n    }\n    return acc\n  }, {})\n"]}